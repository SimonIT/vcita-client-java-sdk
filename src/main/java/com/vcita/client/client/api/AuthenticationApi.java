/*
 * client_api API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.vcita.client.client.api;

import com.vcita.client.client.ApiCallback;
import com.vcita.client.client.ApiClient;
import com.vcita.client.client.ApiException;
import com.vcita.client.client.ApiResponse;
import com.vcita.client.client.Configuration;
import com.vcita.client.client.Pair;
import com.vcita.client.client.ProgressRequestBody;
import com.vcita.client.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.vcita.client.client.model.InlineObject2;
import com.vcita.client.client.model.InlineObject3;
import com.vcita.client.client.model.InlineResponse200;
import com.vcita.client.client.model.InlineResponse2001;
import com.vcita.client.client.model.PortalsBusinessUidAuthenticationsSendCodePost200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AuthenticationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AuthenticationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuthenticationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for portalsBusinessUidAuthenticationsLogoutPost
     * @param businessUid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call portalsBusinessUidAuthenticationsLogoutPostCall(String businessUid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portals/{business_uid}/authentications/logout"
            .replaceAll("\\{" + "business_uid" + "\\}", localVarApiClient.escapeString(businessUid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call portalsBusinessUidAuthenticationsLogoutPostValidateBeforeCall(String businessUid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'businessUid' is set
        if (businessUid == null) {
            throw new ApiException("Missing the required parameter 'businessUid' when calling portalsBusinessUidAuthenticationsLogoutPost(Async)");
        }
        

        okhttp3.Call localVarCall = portalsBusinessUidAuthenticationsLogoutPostCall(businessUid, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param businessUid  (required)
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse200 portalsBusinessUidAuthenticationsLogoutPost(String businessUid) throws ApiException {
        ApiResponse<InlineResponse200> localVarResp = portalsBusinessUidAuthenticationsLogoutPostWithHttpInfo(businessUid);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param businessUid  (required)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse200> portalsBusinessUidAuthenticationsLogoutPostWithHttpInfo(String businessUid) throws ApiException {
        okhttp3.Call localVarCall = portalsBusinessUidAuthenticationsLogoutPostValidateBeforeCall(businessUid, null);
        try {
            Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<InlineResponse200>(){}.getType()));
            e.setErrorObjectType(new GenericType<InlineResponse200>(){});
            throw e;
        }
    }

    /**
     *  (asynchronously)
     * 
     * @param businessUid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call portalsBusinessUidAuthenticationsLogoutPostAsync(String businessUid, final ApiCallback<InlineResponse200> _callback) throws ApiException {

        okhttp3.Call localVarCall = portalsBusinessUidAuthenticationsLogoutPostValidateBeforeCall(businessUid, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for portalsBusinessUidAuthenticationsSendCodePost
     * @param businessUid  (required)
     * @param inlineObject2  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call portalsBusinessUidAuthenticationsSendCodePostCall(String businessUid, InlineObject2 inlineObject2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = inlineObject2;

        // create path and map variables
        String localVarPath = "/portals/{business_uid}/authentications/send_code"
            .replaceAll("\\{" + "business_uid" + "\\}", localVarApiClient.escapeString(businessUid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call portalsBusinessUidAuthenticationsSendCodePostValidateBeforeCall(String businessUid, InlineObject2 inlineObject2, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'businessUid' is set
        if (businessUid == null) {
            throw new ApiException("Missing the required parameter 'businessUid' when calling portalsBusinessUidAuthenticationsSendCodePost(Async)");
        }
        

        okhttp3.Call localVarCall = portalsBusinessUidAuthenticationsSendCodePostCall(businessUid, inlineObject2, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param businessUid  (required)
     * @param inlineObject2  (optional)
     * @return PortalsBusinessUidAuthenticationsSendCodePost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public PortalsBusinessUidAuthenticationsSendCodePost200Response portalsBusinessUidAuthenticationsSendCodePost(String businessUid, InlineObject2 inlineObject2) throws ApiException {
        ApiResponse<PortalsBusinessUidAuthenticationsSendCodePost200Response> localVarResp = portalsBusinessUidAuthenticationsSendCodePostWithHttpInfo(businessUid, inlineObject2);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param businessUid  (required)
     * @param inlineObject2  (optional)
     * @return ApiResponse&lt;PortalsBusinessUidAuthenticationsSendCodePost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PortalsBusinessUidAuthenticationsSendCodePost200Response> portalsBusinessUidAuthenticationsSendCodePostWithHttpInfo(String businessUid, InlineObject2 inlineObject2) throws ApiException {
        okhttp3.Call localVarCall = portalsBusinessUidAuthenticationsSendCodePostValidateBeforeCall(businessUid, inlineObject2, null);
        try {
            Type localVarReturnType = new TypeToken<PortalsBusinessUidAuthenticationsSendCodePost200Response>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<PortalsBusinessUidAuthenticationsSendCodePost200Response>(){}.getType()));
            e.setErrorObjectType(new GenericType<PortalsBusinessUidAuthenticationsSendCodePost200Response>(){});
            throw e;
        }
    }

    /**
     *  (asynchronously)
     * 
     * @param businessUid  (required)
     * @param inlineObject2  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call portalsBusinessUidAuthenticationsSendCodePostAsync(String businessUid, InlineObject2 inlineObject2, final ApiCallback<PortalsBusinessUidAuthenticationsSendCodePost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = portalsBusinessUidAuthenticationsSendCodePostValidateBeforeCall(businessUid, inlineObject2, _callback);
        Type localVarReturnType = new TypeToken<PortalsBusinessUidAuthenticationsSendCodePost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for portalsBusinessUidAuthenticationsVerifyCodePost
     * @param businessUid  (required)
     * @param inlineObject3  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call portalsBusinessUidAuthenticationsVerifyCodePostCall(String businessUid, InlineObject3 inlineObject3, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = inlineObject3;

        // create path and map variables
        String localVarPath = "/portals/{business_uid}/authentications/verify_code"
            .replaceAll("\\{" + "business_uid" + "\\}", localVarApiClient.escapeString(businessUid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call portalsBusinessUidAuthenticationsVerifyCodePostValidateBeforeCall(String businessUid, InlineObject3 inlineObject3, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'businessUid' is set
        if (businessUid == null) {
            throw new ApiException("Missing the required parameter 'businessUid' when calling portalsBusinessUidAuthenticationsVerifyCodePost(Async)");
        }
        

        okhttp3.Call localVarCall = portalsBusinessUidAuthenticationsVerifyCodePostCall(businessUid, inlineObject3, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param businessUid  (required)
     * @param inlineObject3  (optional)
     * @return InlineResponse2001
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse2001 portalsBusinessUidAuthenticationsVerifyCodePost(String businessUid, InlineObject3 inlineObject3) throws ApiException {
        ApiResponse<InlineResponse2001> localVarResp = portalsBusinessUidAuthenticationsVerifyCodePostWithHttpInfo(businessUid, inlineObject3);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param businessUid  (required)
     * @param inlineObject3  (optional)
     * @return ApiResponse&lt;InlineResponse2001&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse2001> portalsBusinessUidAuthenticationsVerifyCodePostWithHttpInfo(String businessUid, InlineObject3 inlineObject3) throws ApiException {
        okhttp3.Call localVarCall = portalsBusinessUidAuthenticationsVerifyCodePostValidateBeforeCall(businessUid, inlineObject3, null);
        try {
            Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<InlineResponse2001>(){}.getType()));
            e.setErrorObjectType(new GenericType<InlineResponse2001>(){});
            throw e;
        }
    }

    /**
     *  (asynchronously)
     * 
     * @param businessUid  (required)
     * @param inlineObject3  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call portalsBusinessUidAuthenticationsVerifyCodePostAsync(String businessUid, InlineObject3 inlineObject3, final ApiCallback<InlineResponse2001> _callback) throws ApiException {

        okhttp3.Call localVarCall = portalsBusinessUidAuthenticationsVerifyCodePostValidateBeforeCall(businessUid, inlineObject3, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
